#!/bin/bash

set -e

CONTAINER=grr_container
SERVER_START_DEADLINE_SECS=300
CLIENT_CONNECT_DEADLINE_SECS=30

function start_container() {
  echo "Starting container.."

  # Run demo container in background and send its logs to the systemd journal.
  docker run -d \
      --env EXTERNAL_HOSTNAME=localhost \
      --env ADMIN_PASSWORD=demo \
      --publish 0.0.0.0:8000:8000 \
      --publish 0.0.0.0:8080:8080 \
      --log-driver=journald \
      --name "${CONTAINER}" \
      demonchild2112/grr
}

function wait_for_container_to_start() {
  echo "Waiting for container to start.."
  poll_start=$(date +%s)
  while true; do
    ready_msg="$(docker logs ${CONTAINER} 2>&1 | perl -wln -e 'print if /\bAdmin UI gui is at\b/')"
    if [[ ! -z "${ready_msg}" ]]; then
      break
    fi
    secs_elapsed=$(( $(date +%s) - $poll_start ))
    if [[ $secs_elapsed -gt $SERVER_START_DEADLINE_SECS ]]; then
      echo "Error: Container has not started after ${SERVER_START_DEADLINE_SECS} seconds."
      exit 1
    fi
    echo 'Container is not ready. Sleeping for 5 seconds..'
    sleep 5
  done
  echo "Container is ready."
}

start_container

wait_for_container_to_start

docker cp docker/fake-systemctl.sh "${CONTAINER}":/bin/systemctl

xenial_installer="$(docker exec ${CONTAINER} ls /usr/share/grr-server/executables/installers | grep -e grr_.*_amd64.deb)"

docker exec "${CONTAINER}" dpkg -i "/usr/share/grr-server/executables/installers/${xenial_installer}"

echo "Waiting for server to connect to client."

sleep ${CLIENT_CONNECT_DEADLINE_SECS}

echo "Fetching client id."

client_id="$(docker exec ${CONTAINER} /usr/share/grr-server/bin/grr_console --code_to_execute 'print(str(client_index.CreateClientIndex().LookupClients([])[0]))')"

docker exec "${CONTAINER}" /usr/share/grr-server/bin/grr_end_to_end_tests --verbose --client_ids $client_id 2>&1 | tee xenial_end_to_end.log
